{
  "name": "React-html-components",
  "tagline": "Generic html react components for materializecss",
  "body": "# react-html-components\r\n## Generic html react components for materializecss\r\n<br />\r\n[![Build\r\nStatus](https://travis-ci.org/mykhailokoretskyi/react-html-components.svg?branch=master)](https://travis-ci.org/react-html-components/react-html-components) [![npm\r\nversion](http://img.shields.io/npm/v/react-html-components.svg?style=flat)](https://npmjs.org/package/react-html-components \"View this project on npm\")\r\n\r\n### Getting started\r\n\r\n#### Install npm package\r\n`npm install --save react-html-components`\r\n\r\nThis package requires [materializecss](http://materializecss.com/, \"Materialize css framework\").\r\n\r\n#### Usage\r\n`import {TextInput, Switch} from 'react-html-components';`\r\n\r\n### Currently supported materialize elements:\r\n\r\n1. Form elements\r\n  1. input type text (**TextInput**)\r\n  2. input type email (**EmailInput**)\r\n  3. input type password (**PasswordInput**)\r\n  4. input type radio (**RadioButton**)\r\n  5. input type checkbox (**Checkbox**)\r\n  6. switch (**Switch**)\r\n2. Buttons\r\n  1. Button\r\n  2. LargeButton\r\n  3. FlatButton\r\n  4. FloatingButton\r\n3. Modal\r\n\r\n* * * * * * * *\r\n\r\n## Documentation\r\n\r\n### Form elements\r\n\r\n#### Common attributes\r\n* `value`              - type `string`;\r\n* `checked`            - type `boolean`;\r\n* `name`               - type `string`;\r\n* `disabled`           - type `boolean`;\r\n* `id`                 - type `string`;\r\n* `required`           - type `boolean`;\r\n* `extraClass`         - type `string` (is added to `class` attribute of `<input/>`);\r\n* `label`              - type `string` (injected with `dangerouslySetInnerHTML`);\r\n* `changeCallback`     - type `function` (executed when input changes value/checked);\r\n* `mouseEnterCallback` - type `function` (executed on hover of `<input/>`);\r\n* `mouseLeaveCallback` - type `function` (executed on mouse leave the `<input/>`);\r\n\r\n#### Methods\r\n\r\nFollowing accessor methods are available through the React\\`s `refs`:\r\n* `value`              - getter/setter;\r\n* `checked`            - getter/setter;\r\n* `disabled`           - getter/setter;\r\n* `required`           - getter/setter;\r\n* `type`               - getter;\r\n\r\n*Example*:\r\n```\r\nsomeMethod(){\r\n  this.refs.textInput.value(\"new value\"); // setter\r\n  this.refs.textInput.value()             // getter\r\n}\r\n.......\r\nrender(){\r\n  return (\r\n    <TextInput ref=\"textInput\" value=\"initial value\" />\r\n);\r\n```\r\n\r\n* * * * * * * *\r\n\r\n#### TextInput (`type=\"text\"`)\r\n\r\nSupports *common* attributes.\r\n\r\n##### Attributes\r\n* `placeholder`        - type `string`;\r\n\r\n* * * * * * * *\r\n\r\n#### PasswordInput (`type=\"password\"`)\r\n\r\nSupports *common* attributes.\r\n\r\n##### Attributes\r\n* `placeholder`        - type `string`;\r\n\r\n* * * * * * * *\r\n\r\n#### EmailInput (`type=\"email\"`)\r\n\r\nSupports *common* attributes.\r\n\r\n##### Attributes\r\n* `placeholder`        - type `string`;\r\n* `validate`           - type `bool` (reference [materializecss](http://materializecss.com/, \"Materialize css framework\") documentation);\r\n* `errorMessage`       - type `string` (`data-error` attribute of `<input/>`);\r\n* `successMessage`     - type `string` (`data-success` attribute of `<input/>`);\r\n\r\n* * * * * * * *\r\n\r\n#### Checkbox (`type=\"checkbox\"`)\r\n\r\nSupports *common* attributes.\r\n\r\n* * * * * * * *\r\n\r\n#### RadioButton (`type=\"radio\"`)\r\n\r\nSupports *common* attributes.\r\n\r\n##### Attributes\r\n* `withGap`            - type `bool` (reference [materializecss](http://materializecss.com/, \"Materialize css framework\") documentation);\r\n\r\n* * * * * * * *\r\n\r\n### Buttons\r\n\r\n#### Button\r\n`Button` - is a base component for buttons.\r\n\r\n#### Methods (available through `refs`)\r\n* `disabled`           - setter/getter;\r\n\r\n#### Attributes\r\n* `classes`            - type `Array` of css classes which will be concatenated with space;\r\n* `clickCallback`      - type `func` - will be triggered on click (is not triggered on disabled buttons);\r\n* `disabled`           - type `bool`;\r\n* `type`               - type oneOf([\"\", \"btn-large\", \"btn-flat\", \"btn-floating\"]) - should not be used normaly;\r\n\r\n\r\n#### LargeButton (Button type={\"btn-large\"})\r\n#### FlatButton (Button type={\"btn-flat\"})\r\n#### FloatingButton (Button type={\"btn-floating\"})\r\n\r\n*Example*:\r\n```\r\nimport { LargeButton } from 'react-html-components';\r\n\r\n.......\r\n\r\nrender(){\r\n  return (\r\n    <LargeButton disabled={true}>Test Button</LargeButton>\r\n);\r\n\r\n```\r\n\r\n* * * * * * * *\r\n\r\n### Modal\r\n\r\n#### Attributes\r\n* `type`               - type `string` (default modal, if empty; `bottom-sheet`, `modal-fixed-footer`);\r\n\r\n#### Methods (available through `refs`)\r\n* `open`               - open modal;\r\n* `close`              - close modal;\r\n\r\n*Example*:\r\n```\r\nimport { Modal, ModalContent, ModalFooter, FlatButton } from 'react-html-components';\r\n\r\nrender(){\r\n  return (\r\n    <Modal ref=\"modal\" type=\"bottom-sheet\">\r\n      <ModelContent>\r\n        Content\r\n      </ModalContent>\r\n      <ModalFooter>\r\n        <FlatButton classes={[\"modal-action modal-close waves-effect waves-green\"]}>Agree</FlatButton>\r\n      </ModelFooter>\r\n    </Modal>\r\n);\r\n\r\nopenModal(){\r\n  this.refs.modal.open();\r\n}\r\n\r\ncloseModal(){\r\n  this.refs.modal.close();\r\n}\r\n\r\n```\r\n\r\n* * * * * * * *\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}